name: Build and Push Docker Image

on:
  push:
    branches:
      - master
    paths:
      - "Dockerfile"
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ghcr.io/ub-cse-305/305image

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate new version number from GHCR
        id: setver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PKG="305image"
          OWNER="ub-cse-305"

          LAST_TAG=$(gh api /orgs/$OWNER/packages/container/$PKG/versions \
            --jq '.[0].metadata.container.tags[1]' || echo "0.0.0")

          echo "Last tag: $LAST_TAG"

          IFS='.' read -r MAJOR MINOR PATCH <<< "${LAST_TAG#v}"
          PATCH=$((PATCH+1))
          VERSION="$MAJOR.$MINOR.$PATCH"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  build:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/riscv64
          - linux/ppc64le
          - linux/s390x
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ needs.version.outputs.version }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: 1zumisagiri
          password: ${{ secrets.CSE305_ACTION_PAT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ github.repository }}-${{ github.ref_name }}-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ github.repository }}-${{ github.ref_name }}-${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
      - version
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: 1zumisagiri
          password: ${{ secrets.CSE305_ACTION_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ needs.version.outputs.version }}
            type=raw,value=latest

      - name: Create multi-arch manifest and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create \
            -t ${{ env.REGISTRY_IMAGE }}:${{ needs.version.outputs.version }} \
            -t ${{ env.REGISTRY_IMAGE }}:latest \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ needs.version.outputs.version }}
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:latest